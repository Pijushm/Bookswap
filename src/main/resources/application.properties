#spring.datasource.url= jdbc:mysql://localhost:3306/bookswap
#spring.datasource.username=root
#spring.datasource.password=root

spring.datasource.url= jdbc:h2:mem:testdb
#spring.datasource.username=root
#spring.datasource.password=root

spring.datasource.username=sa
#spring.datasource.password=
spring.h2.console.enabled=true
#spring.datasource.url=jdbc:h2:mem:testdb
spring.data.jpa.repositories.bootstrap-mode=default









logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.hibernate.ddl-auto=update


upload.path=E:/Projects/Bookswap/uploads/images/books

pagebooksno=3

server.port=8081


bookconditions=BRAND NEW,LIKE NEW,VERY GOOD,GOOD,ACCEPTABLE

spring.jpa.properties.javax.persistence.validation.mode=none



###### Email Properties ######
#https://stackoverflow.com/questions/35347269/javax-mail-authenticationfailedexception-535-5-7-8-username-and-password-not-ac
#

#There are already good answers on optimizing the existing success page. I want to add an alternative.

#Demo mode

#Skip the success page and log the user in immediately. There are a lot of examples of web applications, which allow access before verifying your email address. The user may browse the content, configure his profile, ... but public content submissions or monetary actions are allowed only after verifying the email address.


spring.mail.host = smtp.gmail.com
spring.mail.port = 587
spring.mail.properties.mail.smtp.starttls.enable = true
spring.mail.username = royroddur123@gmail.com
spring.mail.password = *******
spring.mail.properties.mail.smtp.starttls.required = true
spring.mail.properties.mail.smtp.auth = true
spring.mail.properties.mail.smtp.connectiontimeout = 5000
spring.mail.properties.mail.smtp.timeout = 5000
spring.mail.properties.mail.smtp.writetimeout = 5000


#oauth2
spring.security.oauth2.client.registration.facebook.client-id=278245223670224

spring.security.oauth2.client.registration.facebook.client-secret=************


spring.security.oauth2.client.registration.google.client-id=760561169074-4d3tgjllbg781fdcddi9sbl47ssd56qj.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=******************

#for testing purpose using github
spring.security.oauth2.client.registration.github.client-id=c159659b587146d2321a
spring.security.oauth2.client.registration.github.client-secret= *******************


#https://www.baeldung.com/registration-restful-api

#https://www.baeldung.com/spring-security-login-new-device-location
